# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'at_class_students.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
from core import Recognize
from os import getcwd
import cv2
import time
from base64 import b64decode
from os import remove
from slice_png import img as bgImg
#import image1_rc


class Ui_MainWindow(object):
    def __init__(self, MainWindow):
        self.path = getcwd()
        '''这是做什么的'''
        self.timer_camera = QtCore.QTimer()  # 定时器

        self.setupUi(MainWindow)
        self.retranslateUi(MainWindow)
        self.exitBtn.setText('ssafaf')
        self.slot_init()  # 槽'函数设置
        self.cap = cv2.VideoCapture()  # 屏幕画面对象
        self.CAM_NUM = 0  # 摄像头标号

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(677, 409)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.videoDisplay = QtWidgets.QLabel(self.centralwidget)
        self.videoDisplay.setGeometry(QtCore.QRect(0, 10, 371, 281))
        self.videoDisplay.setText("")
        #self.videoDisplay.setPixmap(QtGui.QPixmap("image/enter_class.png"))
        self.videoDisplay.setScaledContents(True)
        self.videoDisplay.setObjectName("videoDisplay")
        self.cameraBtn = QtWidgets.QPushButton(self.centralwidget)
        self.cameraBtn.setGeometry(QtCore.QRect(410, 120, 151, 51))
        self.cameraBtn.setObjectName("cameraBtn")
        self.exitBtn = QtWidgets.QPushButton(self.centralwidget)
        self.exitBtn.setGeometry(QtCore.QRect(410, 210, 151, 51))
        self.exitBtn.setObjectName("exitBtn")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(440, 20, 72, 15))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(400, 70, 72, 15))
        self.label_3.setObjectName("label_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 677, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.cameraBtn.setText(_translate("MainWindow", "开启/关闭摄像头"))
        self.exitBtn.setText(_translate("MainWindow", "退出课堂"))
        self.label_2.setText(_translate("MainWindow", "课堂计时"))
        self.label_3.setText(_translate("MainWindow", "当前评价"))

    def slot_init(self):
        self.exitBtn.setText('ssadasd')
        #self.cameraBtn.clicked.connect(self.btn_open_camera)
        self.exitBtn.clicked.connect(self.btn)
#        self.timer_camera.timeout.connect(self.show_camera)

    def btn(self):
        self.exitBtn.setText('sssaddf')
    #self.videoDisplay.setPixmap(QtGui.QPixmap("image/enter_class.png"))



    def btn_open_camera(self):
        if self.timer_camera.isActive()==False:
            flag=self.cap.open(self.CAM_NUM)
            if flag == False:  # 相机打开失败提示
                msg = QtWidgets.QMessageBox.warning(self.centralwidget, u"Warning",
                                                    u"请检测相机与电脑是否连接正确！ ",
                                                    buttons=QtWidgets.QMessageBox.Ok,
                                                    defaultButton=QtWidgets.QMessageBox.Ok)

            else:
                QtWidgets.QApplication.processEvents()
                self.emotion_model = Recognize()
                QtWidgets.QApplication.processEvents()
                # 打开定时器
                self.timer_camera.start(30)
        else:
            # 定时器未开启，界面回复初始状态
            self.timer_camera.stop()
            self.videoDisplay.clear()

    def show_camera(self):
        # 定时器槽函数，每隔一段时间执行
        flag, self.image = self.cap.read()  # 获取画面
        self.image = cv2.flip(self.image, 1)  # 左右翻转

        tmp = open('slice.png', 'wb')
        tmp.write(b64decode(bgImg))
        tmp.close()
        canvas = cv2.imread('slice.png')  # 用于数据显示的背景图片
        remove('slice.png')

        time_start = time.time()  # 计时
        # 使用模型预测
        result = self.emotion_model.run(self.image, canvas, self.label_face, self.label_outputResult)
        time_end = time.time()
        # 在界面显示结果

